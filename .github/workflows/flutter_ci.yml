name: Staging APK build

on:
  push:
    branches: ['master']
  pull_request:
    branches: ['master']
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      gradle_cache_hit: ${{ steps.gradle_cache.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Java
        id: gradle_cache
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17.x'
          cache: 'gradle'

      - name: Setup Flutter
        id: flutter_cache
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.2'
          channel: 'stable'
          cache: true

      - name: Flutter clean
        run: flutter clean

      - name: Get dependencies
        run: flutter pub get

      - name: Build runner
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Cache generated files and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            build
            .dart_tool/build/
            lib/**/*.g.dart
            lib/**/*.freezed.dart
            lib/**/*.config.dart
            lib/**/*.graphql.dart
            test/**/*.mocks.dart
          key: flutter-cache-${{ runner.os }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            flutter-cache-${{ runner.os }}-

  analyze:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3

      - name: Setup Flutter (from cache)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.2'
          channel: 'stable'
          cache: true

      - name: Restore cache for dependencies and generated files
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            build
            .dart_tool/build/
            lib/**/*.g.dart
            lib/**/*.freezed.dart
            lib/**/*.config.dart
            lib/**/*.graphql.dart
            test/**/*.mocks.dart
          key: flutter-cache-${{ runner.os }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            flutter-cache-${{ runner.os }}-

      - name: Start Dart code analysis
        run: flutter analyze .

  unit_test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3

      - name: Setup Flutter (from cache)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.2'
          channel: 'stable'
          cache: true

      - name: Restore cache for dependencies and generated files
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            build
            .dart_tool/build/
            lib/**/*.g.dart
            lib/**/*.freezed.dart
            lib/**/*.config.dart
            lib/**/*.graphql.dart
            test/**/*.mocks.dart
          key: flutter-cache-${{ runner.os }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            flutter-cache-${{ runner.os }}-

      - name: Run unit tests and collect coverage
        run: flutter test --coverage

      - name: Generate HTML Coverage Report
        run: |
          sudo apt-get install lcov
          genhtml coverage/lcov.info -o coverage/html

  build:
    runs-on: ubuntu-latest
    needs: [analyze, unit_test]
    steps:
      - uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.2'
          channel: 'stable'
          cache: true

      - name: Restore cache for dependencies and generated files
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            build
            .dart_tool/build/
            lib/**/*.g.dart
            lib/**/*.freezed.dart
            lib/**/*.config.dart
            lib/**/*.graphql.dart
            test/**/*.mocks.dart
          key: flutter-cache-${{ runner.os }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            flutter-cache-${{ runner.os }}-

      - name: Start staging APK build
        run: flutter build apk --release --flavor stg --obfuscate --split-debug-info=debug_files lib/main_stg.dart

      - name: Upload staging APK
        uses: actions/upload-artifact@v3
        with:
          name: staging-apk-release
          path: build/app/outputs/flutter-apk/app-stg-release.apk